// Generated by LiveScript 1.2.0
(function(){
  var net, MultiplexStream, tls, fs, events, Netmask, App, app, ClientHandler;
  net = require("net");
  MultiplexStream = require("multiplex-stream");
  tls = require("tls");
  fs = require("fs");
  events = require("events");
  Netmask = require("netmask").Netmask;
  App = function(){};
  App.prototype = new events.EventEmitter();
  app = new App();
  global.app = app;
  app.configDir = process.env.RS_DIR || "/tmp/rs";
  app.config = require(app.configDir + "/rs-server-config");
  if (app.config.adminNetmask) {
    app.config.adminNetmask = new Netmask(app.config.adminNetmask);
  }
  app.db = require("./database");
  app.plugins = [];
  global.Plugin = function(name, ver, onInit){
    app.plugins.push({
      name: name,
      ver: ver,
      onInit: onInit
    });
  };
  App.prototype.runPlugins = function(){
    var i, results$ = [];
    for (i in this.plugins) {
      results$.push(this.plugins[i].onInit(this));
    }
    return results$;
  };
  fs.readdirSync("./plugins").forEach(function(file){
    return require("./plugins/" + file);
  });
  app.connections = [];
  app.idCounter = 1;
  app.seqCounter = 1;
  app.tls_options = {
    key: fs.readFileSync(app.configDir + "/rs-server.key"),
    cert: fs.readFileSync(app.configDir + "/rs-server.crt"),
    requestCert: true,
    ca: [fs.readFileSync(app.configDir + "/ca/rs-ca.crt")]
  };
  app.multiplex_options = {
    connectTimeout: 5000
  };
  ClientHandler = function(cleartextStream){
    var self, downstreamMultiplex;
    self = this;
    this.cleartextStream = cleartextStream;
    this.id = app.idCounter++;
    this.authState = "";
    this.hostInfo = {
      address: cleartextStream.remoteAddress,
      connectionTimestamp: +new Date()
    };
    if (cleartextStream.authorized) {
      this.cert = cleartextStream.getPeerCertificate();
      this.authState = this.cert.subject.OU === app.config.adminOU ? "admin" : "host";
      this.hostInfo.cn = this.cert.subject.CN;
      this.hostInfo.email = this.cert.subject.EMAIL;
    }
    this.sequenceCallback = {};
    this.messenger = {};
    downstreamMultiplex = new MultiplexStream(app.multiplex_options, function(downstreamConnection){
      return self.onMultiplexConnection(downstreamConnection);
    });
    cleartextStream.pipe(downstreamMultiplex).pipe(cleartextStream);
    return cleartextStream.on("close", function(){
      var index;
      index = app.connections.indexOf(this);
      if (index > -1) {
        return app.connections.splice(index, 1);
      }
    }).bind(this);
  };
  ClientHandler.prototype = new events.EventEmitter();
  ClientHandler.prototype.onControlConnection = require("rsproto/jsonCtrlMessage").onControlConnection;
  ClientHandler.prototype.onMultiplexConnection = function(connection){
    switch (connection.id) {
    case "\"ctrl":
      this.controlConnection = connection;
      return this.onControlConnection(connection);
    }
  };
  ClientHandler.prototype.sendMessage = function(mtype, data, callback){
    var seqnum;
    seqnum = null;
    if (callback) {
      seqnum = app.seqCounter++;
      this.sequenceCallback[seqnum] = callback;
    }
    return this.controlConnection.write(JSON.stringify([seqnum, null, mtype, data]) + "\n");
  };
  tls.createServer(app.tls_options, function(cleartextStream){
    var handler;
    console.log("Connection...");
    handler = new ClientHandler(cleartextStream);
    app.connections.push(handler);
    return app.emit("connection", handler);
  }).listen(app.config.serverPort).on("clientError", function(err, pair){
    return console.log("clientError", err);
  });
  app.runPlugins();
  console.log("Listening on port " + app.config.serverPort + " ...");
}).call(this);
