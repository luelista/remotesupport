// Generated by LiveScript 1.2.0
(function(){
  var fs, pem, _;
  fs = require("fs");
  pem = require("pem");
  _ = require("underscore");
  Plugin("read_certs", "0.0.1", function(App){
    var caKey, caCert, serviceKey, serviceCertificate;
    caKey = App.configDir + "/ca/rs-ca.key";
    caCert = App.configDir + "/ca/rs-ca.crt";
    serviceKey = fs.readFileSync(caKey);
    serviceCertificate = fs.readFileSync(caCert);
    return App.on("connection", function(handler){
      var storeCSR;
      storeCSR = function(info, next){
        handler.pendingCSR = {
          commonName: info.commonName,
          ou: info.organizationUnit,
          modulus: info.modulus,
          pem: info.pem,
          remoteEndpoint: handler.hostInfo.address
        };
        return next(null, {
          id: handler.id
        });
      };
      handler.messenger["read_certs:read_ca_cert"] = function(type, data, next){
        return next(err, {
          caCert: serviceCertificate.toString()
        });
      };
      handler.messenger["read_certs:read_my_cert"] = function(type, data, next){
        if (handler.pendingCSR && handler.pendingCSR.certificate) {
          return next(err, {
            cert: handler.pendingCSR.certificate.toString()
          });
        } else {
          return next("no signed certificate", null);
        }
      };
      handler.messenger["read_certs:put_csr"] = function(type, data, next){
        if (data && data.pem) {
          return pem.readCertificateInfo(data.pem, function(err1, info){
            return pem.getModulus(data.pem, function(err2, modinfo){
              if (err1 || err2) {
                next("" + (err1 || err2), null);
                return;
              }
              console.log("modulus:", modinfo.modulus);
              return storeCSR(_.extend(data, info, modinfo), next);
            });
          });
        } else if (data && data.commonName && data.ou && data.ou !== App.config.adminOU) {
          return storeCSR({
            commonName: data.commonName,
            ou: data.ou,
            modulus: "",
            pem: ""
          }, next);
        } else {
          return next("missing parameters", null);
        }
      };
      return handler.messenger["read_certs:csr_action"] = function(type, data, next){
        var target, i;
        if (handler.authState !== "admin") {
          next("forbidden", null);
          return;
        }
        target = null;
        for (i in app.connections) {
          if (app.connections[i].id === data.id && app.connections[i].pendingCSR) {
            target = app.connections[i];
          }
        }
        if (target == null) {
          next("no csr found", null);
          return;
        }
        switch (data.action) {
        case "get":
          return next(null, target.pendingCSR);
        case "reject":
          target.pendingCSR = null;
          target.sendMessage("read_certs:on_csr_accepted", false);
          return next(null, true);
        case "accept":
          return App.db.Certificate.create({
            commonName: target.pendingCSR.commonName,
            ou: target.pendingCSR.ou
          }).complete(function(err, user){
            var certreq;
            if (err) {
              next(err, false);
              return;
            }
            certreq = {
              csr: target.pendingCSR.pem,
              serviceKey: serviceKey,
              serviceCertificate: serviceCertificate,
              days: 3650,
              serial: 100000 + user.id
            };
            if (!certreq.csr) {
              certreq.ou = target.pendingCSR.ou;
              certreq.commonName = target.pendingCSR.commonName;
              certreq.country = "DE";
              certreq.organization = "Teamwiki.de Remote Support";
            }
            return pem.createCertificate(certreq, function(err, certinfo){
              if (err) {
                next("" + err, null);
                return;
              }
              return pem.getFingerprint(certinfo.certificate, function(err, fingerprint){
                var out;
                out = {
                  certificate: certinfo.certificate,
                  privateKey: certinfo.clientKey
                };
                user.fingerprint = fingerprint.fingerprint;
                return user.save().complete(function(err){
                  target.pendingCSR = null;
                  target.sendMessage("read_certs:on_csr_accepted", out);
                  return next(err, !!err);
                }, function(err){});
              });
            });
          });
        }
      };
    });
  });
}).call(this);
