#!/usr/bin/env node

var net = require('net'),
    MultiplexStream = require('multiplex-stream'),
    tls = require('tls'),
    fs = require('fs'),
    pem = require('pem'),
    rsproto = require('rsproto'),
    readline = require('readline'),
    asciitable = require('ascii-table');
var Netmask = require('netmask').Netmask;

var configDir = process.env.RS_DIR || "/tmp/rs";
var config = rsproto.loadConfig(configDir + '/config.json');

var serverHost = process.env.RS_HOST || config.proxy_host || "127.0.0.1";
var serverPort = process.env.RS_PORT || config.proxy_port || 4711;

var certCountry = config.certificate_country || "DE",
    certState = config.certificate_state || "",
    certOrganization = config.certificate_organization || "Acme Remote Support";

var args = process.argv.slice(2);
var conn = null;

function connect() {
  var crtPath = configDir+"/rsctl.crt";
  if (!fs.existsSync(crtPath)) crtPath = null;
  var caCertPath = configDir+"/rsctl-ca.crt";
  if (!fs.existsSync(caCertPath)) caCertPath = null;
  conn = new rsproto(serverHost, serverPort, false, configDir+"/rsctl.key", crtPath, caCertPath);
  conn.on('connected', function() {

  })
}

function displayHelp() {
  var helpText = "Usage: rsctl command [options]\n\n\
Commands:\n\
  hosts        list all connected hosts\n\
  forward      open a tcp tunnel\n\
  exec         execute remote command\n\
  keygen       generate client keys\n\
  configure    interactively prompt for config\n\
  serverkeygen Generate keys and certs for CA and server\n\
  fetchca      fetch the ca certificate and save to config dir\n\
  mancsr       manage certificate signing requests\n\
  testcon      test the connection\n\n\
rsctl forward <hostID> <localListenerPort> <remoteConnectPort> [<remoteConnectIP>]\n\n\
rsctl serverkeygen <hostname>\n\n\
rsctl keygen <hostname> [admin]\n\n";
  console.log(helpText);
}

function generateKeys() {
  var ou = "Remote Support";
  if (args.length > 2 && args[2] == "admin") {
    ou = config.adminOU;
  }
  pem.createCSR({
    keyBitsize: (ou == config.adminOU) ? 4096 : 1024,
    country: certCountry,
    state: certState,
    organization: certOrganization,
    organizationUnit: ou,
    commonName: args[1]
  }, function(error, result) {
    if (error) {
      console.log(error);
      return;
    }
    fs.writeFileSync(configDir+"/rsctl.key", result.clientKey);
    fs.writeFileSync(configDir+"/rsctl.csr", result.csr);
    console.log("successfully created key and csr");
    console.log("trying to send this csr to server now:");
    console.log(result.csr);

    connect();

    conn.on("connected", function() {
      conn.sendMessage("read_certs:put_csr", { pem: result.csr }, function(err, putres) {
        if (err) console.log("ERROR: Unable to put csr on server. ",err);
        else console.log("OK: your CSR was sent to server and store as #"+putres.id+"\nyou might want to do this as admin now:\n  rsctl mancsr "+putres.id);
        conn.once("msg:read_certs:on_csr_accepted", function(accept) {
          if (accept) {
            console.log("Your CSR was accepted. This host is now registered.");
            fs.writeFileSync(configDir+"/rsctl.crt", accept.certificate);
            console.log("certificate written to "+configDir+"/rsctl.crt");
          } else {
            console.log("Your CSR was rejected.");
          }
          conn.close();
        })
      });
    });
  });
}

function generateServerKey() {
  var ou = "Remote Support";
  try{ fs.mkdirSync(configDir+"/ca"); }catch(e) {}
  try{ fs.mkdirSync(configDir+"/default-admin"); }catch(e) {}
  var caKey = configDir+"/ca/rs-ca.key";
  var caCert = configDir+"/ca/rs-ca.crt";
  if (!fs.existsSync(caKey)) {
    console.log("please generate ca key ("+caKey+") and cert first!");
    console.log("  cd "+configDir+"/ca/");
    console.log("  openssl genrsa -aes128 -out rs-ca.key 4096");
    console.log("  openssl req -new -x509 -days 3650 -key rs-ca.key -out rs-ca.crt");
    return;
  }
  pem.createCertificate({
    keyBitsize: 4096,
    country: certCountry,
    state: certState,
    organization: certOrganization,
    organizationUnit: ou,
    commonName: args[1],
    serviceKey: fs.readFileSync(caKey),
    serviceCertificate: fs.readFileSync(caCert),
    serial: 10001
  }, function(error, result) {
    if (error) {
      console.log(error);
      return;
    }
    fs.writeFileSync(configDir+"/rs-server.key", result.clientKey);
    fs.writeFileSync(configDir+"/rs-server.crt", result.certificate);
    fs.writeFileSync(configDir+"/ca/rs-server.csr", result.csr);
    console.log("successfully created SERVER key and cert");


    pem.createCertificate({
      keyBitsize: 4096,
      country: certCountry,
      state: certState,
      organization: certOrganization,
      organizationUnit: "ADMIN",
      commonName: "Sys-Admin",
      serviceKey: fs.readFileSync(caKey),
      serviceCertificate: fs.readFileSync(caCert),
      serial: 10001
    }, function(error, result) {
      if (error) {
        console.log(error);
        return;
      }
      fs.writeFileSync(configDir+"/default-admin/rsctl.key", result.clientKey);
      fs.writeFileSync(configDir+"/default-admin/rsctl.crt", result.certificate);
      fs.writeFileSync(configDir+"/ca/default-admin.csr", result.csr);
      console.log("successfully created DEFAULT ADMIN key and cert\nuse with\n  RS_DIR=\""+configDir+"/default-admin\" rsctl testcon");
    });

  });
}

function fetchCA() {
  connect();
  conn.on('connected', function() {
    conn.sendMessage("read_certs:read_ca_cert", {}, function(err, data) {
      if (err) {
        console.log("Error:",err); return;
      }
      console.log("CA Certificate:");
      console.log(data.caCert);
      fs.writeFileSync(configDir+'/rsctl-ca.crt', data.caCert);
      console.log('CA cert written to file '+configDir+'/rsctl-ca.crt');
      conn.close();
    });
  })
}

function testConnection() {
  connect();
  conn.on('connected', function() {
    conn.sendMessage("hello:who_am_i", {world:"!"}, function(err, data) {
      if (err) console.log("ERROR: ",err);
      for(var k in data) {
        console.log(k, ': ', data[k]);
      }
      conn.close();
    });
  })
}

function manageCSR() {
  connect();
  conn.on('connected', function() {
    conn.on('msg:read_certs:on_new_csr', function(d) {
      console.log("You got a new CSR #"+d.id+".");
    });
    conn.sendMessage("admin:get_hosts", {}, function(err, hosts) {
      if (err) { console.log("ERROR:",err); conn.close(); return; }

      var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      var sel = null, csr = null, act = false;
      var cmds = {
        list: function(next) {
          var tab = new asciitable().setHeading('ID', 'Auth', 'IP Address', 'CN', 'OU', 'Details'); tab.removeBorder();
          for(var i in hosts) {
            var c = hosts[i];
            tab.addRow(c.id, c.auth, c.address, c.cn, c.ou, (c.pendingCSR ? "<PENDING CSR>" : ""));
          }
          console.log(tab.toString());
          next();
        },
        detail: function(next) {
          if (sel==null) { console.log("Please select CSR first."); next(); return; }
          conn.sendMessage("read_certs:csr_action", {id: sel, action:'get'}, function(err,results) {
            if (err) console.log("ERROR:",err);
            else {
              csr = results;
              for(var k in csr) console.log(k, ': ', csr[k]);
            }
            next();
          });
        },
        accept: function(next) {
          if (sel==null) { console.log("Please select CSR first."); next(); return; }
          conn.sendMessage("read_certs:csr_action", {id: sel, action:'accept'}, function(err,results) {
            if (err) console.log("ERROR:",err);
            else console.log("CSR accepted.");
            next();
          });
        },
        reject: function(next) {
          if (sel==null) { console.log("Please select CSR first."); next(); return; }
          conn.sendMessage("read_certs:csr_action", {id: sel, action:'reject'}, function(err,results) {
            if (err) console.log("ERROR:",err);
            else console.log("CSR rejected.");
            next();
          });
        },
        exit: function(next) {
          conn.close();
          rl.close();
        }
      }
      function doo(cmd, next) {
        if (cmds[cmd])  { cmds[cmd](next); act = true; }
        else if (cmd.match(/^[0-9]+$/)) { sel = +cmd; cmds.detail(next); }
        else { console.log("invalid command. possible commands: list, detail, <id>, accept, reject, exit "); act = true; next(); }
      }
      if (args.length > 1) {
        for (var i = 1; i<args.length; i++)
          doo(args[i], function() {});
        if (act) { conn.close(); rl.close(); return; }
      }

      rl.setPrompt('> ');
      rl.on('line', function(line) {
        doo(line, function(){ rl.prompt(); });
      });
      rl.on('close', function() { conn.close(); console.log("Bye.") });
      rl.prompt();

    });
  });
}

function listHosts() {
  connect();
  conn.on('connected', function() {
    conn.sendMessage("admin:get_hosts", {}, function(err, hosts) {
      var tab = new asciitable().setHeading('ID', 'Auth', 'IP Address', 'CN', 'OU', 'Details'); tab.removeBorder();
      for(var i in hosts) {
        var c = hosts[i];
        tab.addRow(c.id, c.auth, c.address, c.cn, c.ou, (c.pendingCSR ? "<PENDING CSR>" : "") + (c.self ? "<SELF>" : ""));
      }
      console.log(tab.toString());
      conn.close();
    });
  });
}

function createForwardIn() {
  connect();
  var lfd_nr = 1;
  conn.on('msg:on_forward_error', function(errMes) {
    console.log("ERROR:",errMes);
  });
  conn.on('connected', function() {
    var id = +args[1], localPort = +args[2], remotePort = +args[3], remoteHost = args[4] || "127.0.0.1";
    if (!id || !localPort || !remotePort) { displayHelp(); return; }
    var server = net.createServer(function(stream) {
      var upstream = conn.multiplex.connect({
        id: ':'+id+':forwardOut:'+remoteHost+':'+remotePort+':'+(++lfd_nr)
      }, function() {
        upstream.pipe(stream).pipe(upstream);
        //console.log("forward stream created");
      }.bind(this)).on('error', function(error) {
        // timeouts and other errors resulting from connect requests
        console.log("multiplex connection error!");
      });
    }).listen(localPort);
  });
}


function execRemoteCommand() {
  connect();
  var lfd_nr = 1;
  conn.on('msg:on_forward_error', function(errMes) {
    console.log("ERROR:",errMes);
  });
  conn.on('connected', function() {
    var id = +args[1], cmd = args[2];
    if (!id || !cmd) { displayHelp(); return; }
    conn.createTunnel(id, { type: 'exec', cmd: cmd, args: args.slice(3) }, function(upstream) {
      process.stdin.pipe(upstream);
      upstream.pipe(process.stdout);
      //console.log("forward stream created");
      upstream.on('end', function() {
        process.stdin.end();
        conn.close();
      });
    }, function(err) {
      // timeouts and other errors resulting from connect requests
      console.log("multiplex connection error!", err);
      conn.close();
    }, true);
  });
}



function dispatcher() {
  switch(args[0] || "") {
  case "keygen":
    generateKeys();
    break;
  case "configure":
    doConfiguration();
    break;
  case "testcon":
    testConnection();
    break;
  case "hosts":
    listHosts();
    break;
  case "fetchca":
    fetchCA();
    break;
  case "mancsr":
    manageCSR();
    break;
  case "serverkeygen":
    generateServerKey();
    break;
  case "forward":
    createForwardIn();
    break;
  case "exec":
    execRemoteCommand();
    break;
  default:
    displayHelp();
  }
}

dispatcher();
